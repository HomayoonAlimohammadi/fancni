#!/bin/bash

log=/var/log/cni.log
config=$(cat /dev/stdin)

# Log the incoming parameters
echo >> "$log"
echo "PATH: $PATH" >> "$log"
echo "COMMAND: $CNI_COMMAND" >> "$log"
echo "IF: $CNI_IFNAME" >> "$log"
echo "NETNS: $CNI_NETNS" >> "$log"
echo "CONT_ID: $CNI_CONTAINERID" >> "$log"
echo "STD IN: $config" >> "$log"

# Determine host's primary IP (the underlay IP)
host_ip=$(ip route get 1.1.1.1 | awk '{print $7; exit}')
fan_overlay="240.0.0.0/8"

# Fan networking maps host IP A.B.C.D to overlay subnet "240.C.D.0/24".
IFS='.' read -r a b c d <<< "$host_ip"
fan_subnet="240.${c}.${d}.0/24"
fan_bridge="fan-240"
# Set default gateway as the first address in the fan subnet
fan_gateway="240.${c}.${d}.1"

# If the fan bridge doesn't exist, call fanctl to bring it up.
if ! ip link show "$fan_bridge" > /dev/null 2>&1; then
    fanctl up "$fan_overlay" "${host_ip}/16" dhcp
    echo "Fan bridge $fan_bridge created via fanctl" >> "$log"
fi

case $CNI_COMMAND in
ADD)
    # For Fan networking, we now derive container IPs from the computed fan_subnet.
    # Allocate a new IP from the fan subnet.
    if [ -f /tmp/last_allocated_ip ]; then
        n=$(cat /tmp/last_allocated_ip)
    else
        n=1
    fi
    n=$((n+1))
    container_ip="240.${c}.${d}.$((n+1))"
    echo "$n" > /tmp/last_allocated_ip

    host_ifname="veth$n"
    pod_ifname="pod$n"
    # Create a veth pair connecting host and container
    ip link add "$host_ifname" type veth peer name "$pod_ifname"
    ip link set "$host_ifname" up

    cont_netns=$(basename "$CNI_NETNS")
    ip link set "$host_ifname" master "$fan_bridge"
    ip link set "$pod_ifname" netns "$cont_netns"

    # In the container namespace, rename the interface, bring it up, assign IP, and set default route.
    ip -n "$cont_netns" link set "$pod_ifname" name "$CNI_IFNAME"
    ip -n "$cont_netns" link set "$CNI_IFNAME" up
    ip -n "$cont_netns" addr add "${container_ip}/24" dev "$CNI_IFNAME"
    ip -n "$cont_netns" route add default via "$fan_gateway"

    # Retrieve the MAC address of the container's interface.
    mac=$(ip -n "$cont_netns" link show "$CNI_IFNAME" | awk '/ether/ {print $2}')
    address="${container_ip}/24"

    # Prepare the output in the expected JSON format.
    output_template='
{
  "cniVersion": "0.3.1",
  "interfaces": [                                            
      {
          "name": "%s",
          "mac": "%s",
          "sandbox": "%s"
      }
  ],
  "ips": [
      {
          "version": "4",
          "address": "%s",
          "gateway": "%s",
          "interface": 0
      }
  ]
}'
    output=$(printf "$output_template" "$CNI_IFNAME" "$mac" "$CNI_NETNS" "$address" "$fan_gateway")
    echo "OUTPUT: $output" >> "$log"
    echo "$output"
    ;;
    
DEL)
    # For deletion, remove the veth pair.
    if [ -f /tmp/last_allocated_ip ]; then
        n=$(cat /tmp/last_allocated_ip)
        host_ifname="veth$n"
        ip link del "$host_ifname"
        echo "DELETED $host_ifname" >> "$log"
    else
        echo "NO IP TO DELETE" >> "$log"
    fi
    ;;
    
GET)
    ;;
    
VERSION)
    echo '{
  "cniVersion": "0.3.1", 
  "supportedVersions": [ "0.3.0", "0.3.1", "0.4.0" ]
}'
    ;;
    
*)
    echo "Unknown cni command: $CNI_COMMAND"
    exit 1
    ;;
esac

